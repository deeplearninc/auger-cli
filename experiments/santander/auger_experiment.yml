organization: auger
project: yury-santander

evaluation_options:
  # Path to file with data. May be URL or path in project files folder 
  data_path: files/train_santander.csv.gz

  # List of features from data file to be used to evaluate ML models
  featureColumns:
    - var_0
    - var_1
    - var_2
    - var_3
    - var_4
    - var_5
    - var_6
    - var_7
    - var_8
    - var_9
    - var_10
    - var_11
    - var_12
    - var_13
    - var_14
    - var_15
    - var_16
    - var_17
    - var_18
    - var_19
    - var_20
    - var_21
    - var_22
    - var_23
    - var_24
    - var_25
    - var_26
    - var_27
    - var_28
    - var_29
    - var_30
    - var_31
    - var_32
    - var_33
    - var_34
    - var_35
    - var_36
    - var_37
    - var_38
    - var_39
    - var_40
    - var_41
    - var_42
    - var_43
    - var_44
    - var_45
    - var_46
    - var_47
    - var_48
    - var_49
    - var_50
    - var_51
    - var_52
    - var_53
    - var_54
    - var_55
    - var_56
    - var_57
    - var_58
    - var_59
    - var_60
    - var_61
    - var_62
    - var_63
    - var_64
    - var_65
    - var_66
    - var_67
    - var_68
    - var_69
    - var_70
    - var_71
    - var_72
    - var_73
    - var_74
    - var_75
    - var_76
    - var_77
    - var_78
    - var_79
    - var_80
    - var_81
    - var_82
    - var_83
    - var_84
    - var_85
    - var_86
    - var_87
    - var_88
    - var_89
    - var_90
    - var_91
    - var_92
    - var_93
    - var_94
    - var_95
    - var_96
    - var_97
    - var_98
    - var_99
    - var_100
    - var_101
    - var_102
    - var_103
    - var_104
    - var_105
    - var_106
    - var_107
    - var_108
    - var_109
    - var_110
    - var_111
    - var_112
    - var_113
    - var_114
    - var_115
    - var_116
    - var_117
    - var_118
    - var_119
    - var_120
    - var_121
    - var_122
    - var_123
    - var_124
    - var_125
    - var_126
    - var_127
    - var_128
    - var_129
    - var_130
    - var_131
    - var_132
    - var_133
    - var_134
    - var_135
    - var_136
    - var_137
    - var_138
    - var_139
    - var_140
    - var_141
    - var_142
    - var_143
    - var_144
    - var_145
    - var_146
    - var_147
    - var_148
    - var_149
    - var_150
    - var_151
    - var_152
    - var_153
    - var_154
    - var_155
    - var_156
    - var_157
    - var_158
    - var_159
    - var_160
    - var_161
    - var_162
    - var_163
    - var_164
    - var_165
    - var_166
    - var_167
    - var_168
    - var_169
    - var_170
    - var_171
    - var_172
    - var_173
    - var_174
    - var_175
    - var_176
    - var_177
    - var_178
    - var_179
    - var_180
    - var_181
    - var_182
    - var_183
    - var_184
    - var_185
    - var_186
    - var_187
    - var_188
    - var_189
    - var_190
    - var_191
    - var_192
    - var_193
    - var_194
    - var_195
    - var_196
    - var_197
    - var_198
    - var_199

  # Target feature to build ML model for
  targetFeature: target

  # If some of your features are strings, add them to the categoricals, so they will be one-hot encoded
  categoricalFeatures:

  # If you want some categoricals whould be hashed instead of one-hot encoded add them to label encoded list
  labelEncodingFeatures: []

  # List of features of datetime type
  datetimeFeatures: []

  # Define type of ML models. true for 'classification', false for 'regression'
  classification: true

  # If target has two unique values, set it to true 
  binaryClassification: true

  # Score used to optimize ML model.
  # Supported scores for classification: accuracy, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision_macro, precision_micro, precision_weighted, recall_macro, recall_micro, recall_weighted
  # Supported scores for binary classification: accuracy, average_precision, f1, f1_macro, f1_micro, f1_weighted, neg_log_loss, precision, precision_macro, precision_micro, precision_weighted, recall, recall_macro, recall_micro, recall_weighted, roc_auc, cohen_kappa_score, matthews_corrcoef
  # Supported scores for regression: explained_variance, neg_median_absolute_error, neg_mean_absolute_error, neg_mean_squared_error, neg_mean_squared_log_error, r2, neg_rmsle, neg_mase, mda, neg_rmse

  scoring: roc_auc

  # Number of K-folds: is a cross validation technique for splitting data into train/test
  crossValidationFolds: 10

  # Max Total Time Minutes, the maximum time in minutes an entire training can run for before it is stopped.
  max_total_time_mins: 60

  # Max Trial Time Minutes, this is the maximum time in minutes an individual trial can run before it is stopped.
  max_eval_time_mins: 10

  # Max Trials, this is the maximum number of trials to be run before training stops.
  max_n_trials: 1000

  # Build ensembles models after plain models completed. See : https://docs.auger.ai/docs/machine-learning/ensembles 
  use_ensemble: true  

search_space:
    lightgbm.LGBMClassifier: {"bagging_freq": {"values": [5,7,10], "type": "int", "tunable": True },
                          "bagging_fraction": {"values": [0.3, 0.335, 0.4], "type": "float", "tunable": True },
                          "boost_from_average": {"values": [False], "type": "categorical", "tunable": False },
                          "boost": {"values": ["gbdt","dart"], "type": "categorical", "tunable": False },
                          "feature_fraction": {"values": [0.03,0.041, 0.05, 0.1], "type": "float", "tunable": True },
                          "learning_rate": {"values": [0.007,0.0083, 0.01, 0.5], "type": "float", "tunable": True },
                          "max_depth": {"values": [-1], "type": "categorical", "tunable": False },
                          "metric": {"values": ["auc"], "type": "categorical", "tunable": False },
                          "min_data_in_leaf": {"values": [50,70,80], "type": "int", "tunable": True },
                          "min_sum_hessian_in_leaf": {"values": [10.0,15.0,20.0], "type": "float", "tunable": True },
                          "num_leaves": {"values": [10,13,15,20], "type": "int", "tunable": True },
                          "tree_learner": {"values": ["serial"], "type": "categorical", "tunable": False }
                          }


cluster:
  worker_count : 2

  # Supported instances types you can get with `auger instances`
  instance_type: c5.2xlarge

  # Cluster will be terminated after period of inactivity
  autoterminate_minutes: 30
